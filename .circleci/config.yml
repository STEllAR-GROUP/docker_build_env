# Copyright (c) 2018 Thomas Heller
#               2018 Patrick Diehl
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

version: 2
jobs:
    build_main_image:
        docker:
            - image: docker:17.05.0-ce-git
        environment:
            IMAGE_FOLDER_NAME: hpx_build_env
            IMAGE_NAME_LATEST: stellargroup/build_env:latest
            IMAGE_NAME_VERSIONED: stellargroup/build_env:17
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Building Docker Image
                command: |
                    docker build -t ${IMAGE_NAME_LATEST} ${IMAGE_FOLDER_NAME}
                    docker tag ${IMAGE_NAME_LATEST} ${IMAGE_NAME_VERSIONED}
                    docker images
            - run:
                name: Testing Docker Image
                command: |
                    docker run ${IMAGE_NAME_LATEST} cmake --version
                    git clone https://github.com/STEllAR-GROUP/hpx.git --depth=1
                    docker run ${IMAGE_NAME_LATEST} printenv
                    docker create -v /hpx --name app ${IMAGE_NAME_LATEST} /bin/true
                    docker cp /root/project/hpx/./ app:/hpx
                    docker run --volumes-from app ${IMAGE_NAME_LATEST} mkdir /hpx/build
                    docker run --volumes-from app -w /hpx/build ${IMAGE_NAME_LATEST} cmake .. -DHPX_WITH_MALLOC=jemalloc -G Ninja
                    docker run --volumes-from app -w /hpx/build ${IMAGE_NAME_LATEST} ninja core
            - deploy:
                command: |
                    if [ "${CIRCLE_BRANCH}" == "master" ]; then
                        docker login -u $DOCKER_USER -p $DOCKER_PASS
                        docker push ${IMAGE_NAME_LATEST}
                        docker push ${IMAGE_NAME_VERSIONED}
                    fi
    build_minimal_image:
        docker:
            - image: docker:17.05.0-ce-git
        environment:
            IMAGE_FOLDER_NAME: minimal_env
            IMAGE_NAME_LATEST: stellargroup/minimal_env:latest
            IMAGE_NAME_VERSIONED: stellargroup/minimal_env:2
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Building Docker Image
                command: |
                    docker build -t ${IMAGE_NAME_LATEST} ${IMAGE_FOLDER_NAME}
                    docker tag ${IMAGE_NAME_LATEST} ${IMAGE_NAME_VERSIONED}
                    docker images
            - deploy:
                command: |
                    if [ "${CIRCLE_BRANCH}" == "master" ]; then
                        docker login -u $DOCKER_USER -p $DOCKER_PASS
                        docker push ${IMAGE_NAME_LATEST}
                        docker push ${IMAGE_NAME_VERSIONED}
                    fi
    # Build docker image for hip github action
    build_hip_image:
        requires:
            - build_main_image
        docker:
            - image: docker:17.05.0-ce-git
        environment:
            IMAGE_FOLDER_NAME: hip_hpx_build_env
            IMAGE_NAME_LATEST: stellargroup/hip_build_env:latest
            IMAGE_NAME_VERSIONED: stellargroup/hip_build_env:14
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Building Docker Image
                command: |
                    docker build -t ${IMAGE_NAME_LATEST} ${IMAGE_FOLDER_NAME}
                    docker tag ${IMAGE_NAME_LATEST} ${IMAGE_NAME_VERSIONED}
                    docker images
            - run:
                name: Testing Docker Image
                command: |
                    docker run ${IMAGE_NAME_LATEST} cmake --version
                    git clone https://github.com/STEllAR-GROUP/hpx.git --depth=1
                    docker run ${IMAGE_NAME_LATEST} printenv
                    docker create -v /hpx --name app ${IMAGE_NAME_LATEST} /bin/true
                    docker cp /root/project/hpx/./ app:/hpx
                    docker run --volumes-from app ${IMAGE_NAME_LATEST} mkdir /hpx/build
                    docker run --volumes-from app -w /hpx/build ${IMAGE_NAME_LATEST} cmake .. -DHPX_WITH_MALLOC=jemalloc -G Ninja
                    docker run --volumes-from app -w /hpx/build ${IMAGE_NAME_LATEST} ninja core
            - deploy:
                command: |
                    if [ "${CIRCLE_BRANCH}" == "master" ]; then
                        docker login -u $DOCKER_USER -p $DOCKER_PASS
                        docker push ${IMAGE_NAME_LATEST}
                        docker push ${IMAGE_NAME_VERSIONED}
                    fi
    # Build docker image for crosscompile arm sve github action
    build_crosscompile_arm_sve_image:
        docker:
            - image: docker:17.05.0-ce-git
        environment:
            IMAGE_FOLDER_NAME: hpx_crosscompile_arm_sve_build_env
            IMAGE_NAME_LATEST: stellargroup/crosscompile_arm_sve_build_env:latest
            IMAGE_NAME_VERSIONED: stellargroup/crosscompile_arm_sve_build_env:2
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Building Docker Image
                command: |
                    docker build -t ${IMAGE_NAME_LATEST} ${IMAGE_FOLDER_NAME}
                    docker tag ${IMAGE_NAME_LATEST} ${IMAGE_NAME_VERSIONED}
                    docker images
            - run:
                name: Testing Docker Image
                command: |
                    docker run ${IMAGE_NAME_LATEST} cmake --version
                    git clone https://github.com/STEllAR-GROUP/hpx.git --depth=1
                    docker run ${IMAGE_NAME_LATEST} printenv
                    docker create -v /hpx --name app ${IMAGE_NAME_LATEST} /bin/true
                    docker cp /root/project/hpx/./ app:/hpx
                    docker run --volumes-from app ${IMAGE_NAME_LATEST} mkdir /hpx/build
                    docker run --volumes-from app -w /hpx/build ${IMAGE_NAME_LATEST} cmake .. \
                        -G Ninja \
                        -DHPX_WITH_MALLOC=system \
                        -DCMAKE_BUILD_TYPE=Release \
                        -DHPX_WITH_FETCH_ASIO=ON \
                        -DHPX_WITH_CXX_STANDARD=20 \
                        -DCMAKE_CXX_FLAGS=-march=armv8-a+sve \
                        -DBOOST_ROOT=/opt/install/boost/release/boost \
                        -DHWLOC_ROOT=/opt/install/hwloc \
                        -DHPX_WITH_GENERIC_CONTEXT_COROUTINES=On \
                        -DCMAKE_SYSTEM_NAME=Linux \
                        -DCMAKE_SYSTEM_PROCESSOR=arm
                    docker run --volumes-from app -w /hpx/build ${IMAGE_NAME_LATEST} ninja core
            - deploy:
                command: |
                    if [ "${CIRCLE_BRANCH}" == "master" ]; then
                        docker login -u $DOCKER_USER -p $DOCKER_PASS
                        docker push ${IMAGE_NAME_LATEST}
                        docker push ${IMAGE_NAME_VERSIONED}
                    fi
    # Build docker image for chplx github actions
    build_chplx_image:
        docker:
            - image: docker:17.05.0-ce-git
        environment:
            IMAGE_FOLDER_NAME: chplx_build_env
            IMAGE_NAME_LATEST: stellargroup/chplx_build_env:latest
            IMAGE_NAME_VERSIONED: stellargroup/chplx_build_env:3
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Building Docker Image
                command: |
                    docker build -t ${IMAGE_NAME_LATEST} ${IMAGE_FOLDER_NAME}
                    docker tag ${IMAGE_NAME_LATEST} ${IMAGE_NAME_VERSIONED}
                    docker images
            - run:
                name: Testing Docker Image
                command: |
                    docker run ${IMAGE_NAME_LATEST} cmake --version
                    git clone https://github.com/STEllAR-GROUP/hpx.git --depth=1
                    docker run ${IMAGE_NAME_LATEST} printenv
                    docker create -v /hpx --name app ${IMAGE_NAME_LATEST} /bin/true
                    docker cp /root/project/hpx/./ app:/hpx
                    docker run --volumes-from app ${IMAGE_NAME_LATEST} mkdir /hpx/build
                    docker run --volumes-from app -w /hpx/build ${IMAGE_NAME_LATEST} \
                        cmake .. -DHPX_WITH_MALLOC=jemalloc -DHPX_WITH_CXX_STANDARD=20 -DCMAKE_CXX_FLAGS=-stdlib=libc++ -G Ninja
                    docker run --volumes-from app -w /hpx/build ${IMAGE_NAME_LATEST} ninja core
            - deploy:
                command: |
                    if [ "${CIRCLE_BRANCH}" == "master" ]; then
                        docker login -u $DOCKER_USER -p $DOCKER_PASS
                        docker push ${IMAGE_NAME_LATEST}
                        docker push ${IMAGE_NAME_VERSIONED}
                    fi
    
    # Build docker image for building hpxmp 
    build_hpxmp_image:
        docker:
            - image: docker:17.05.0-ce-git
        environment:
            IMAGE_FOLDER_NAME: hpxmp_build_env
            IMAGE_NAME_LATEST: stellargroup/hpxmp_build_env:latest
            IMAGE_NAME_VERSIONED: stellargroup/hpxmp_build_env:1
        steps:
            - checkout
            - setup_remote_docker
            - run:
                name: Building Docker Image
                command: |
                    docker build -t ${IMAGE_NAME_LATEST} ${IMAGE_FOLDER_NAME}
                    docker tag ${IMAGE_NAME_LATEST} ${IMAGE_NAME_VERSIONED}
                    docker images
            - deploy:
                command: |
                    if [ "${CIRCLE_BRANCH}" == "master" ]; then
                        docker login -u $DOCKER_USER -p $DOCKER_PASS
                        docker push ${IMAGE_NAME_LATEST}
                        docker push ${IMAGE_NAME_VERSIONED}
                    fi

workflows:
    version: 2
    build_test_deploy:
        jobs:
            - build_main_image
            - build_minimal_image
            - build_hip_image:
                requires:
                  - build_main_image
            - build_crosscompile_arm_sve_image
            - build_chplx_image
            - build_hpxmp_image
